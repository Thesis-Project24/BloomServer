generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:root@localhost:5432/bloom"
}

model User {
  id              String      @id   @unique
  email           String                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      @unique
  username        String        @unique
  first_name      String?
  last_name       String?
  profile_picture String?
  phone_number    String?
  age             Int?
  role            String @default("user")
  mood            Json[]
  appointments    Appointment[]
  tags            Comment[]     @relation("tag")
  comments        Comment[]     @relation("author")
  forumPosts      ForumPost[]
  journalPosts    Journal[]
  meds            MedSchedule[]
  savedArticles   SaveArticle[]
  trackedHabits   TrackHabit[]
  groups          Group[]       @relation("GroupToUser")
  slots           Slot[]        @relation("waitlist")
}

model Doctor {
  id              String     @id   @unique
  email           String        @unique
  first_name      String
  last_name       String
  specialty       String?
  profile_picture String?
  phone_number    String?
  address         String[]      @default([])
  bio             String?
  rate            Int?
  review          Int?
  gender          String?
  role            String @default("doctor")
  appointment     Appointment[]
  articles         Article[]
  groups          Group[]
  window          window[]
  scheduledwindow Scheduledwindow[]
}

model Meds {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  schedules MedSchedule[]
}

model Journal {
  id       Int    @id @default(autoincrement())
  content  String
  title    String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Appointment {
  id          Int     @id @default(autoincrement())
  patientId   String
  doctorId    String
  appDetails  String?
  appStatus   String  @default("available")
  appReview   Int @default(0)
  appFeedback String?
  slotId      Int     @unique
  doctor      Doctor  @relation(fields: [doctorId], references: [id])
  patient     User    @relation(fields: [patientId], references: [id])
  slot        Slot    @relation(fields: [slotId], references: [id])
}

model Slot {
  id           Int          @id @default(autoincrement())
  windowId     Int
  startingTime DateTime
  endingTime   DateTime
  appointment  Appointment?
  window       window       @relation(fields: [windowId], references: [id])
  waitlist     User[]       @relation("waitlist")
}

model ForumPost {
  id       Int       @id @default(autoincrement())
  title    String
  content  String
  image    String?
  upvote   Int?    @default(0)
  downvote Int?     @default(0)
  authorId String
  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id])
  flairs   Flair[]   @relation("FlairToForumPost")
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  upvote     Int?      @default(0)
  downvote   Int?      @default(0)
  postId     Int
  userId     String
  tagId      String?
  post       ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  taggedUser User?     @relation("tag", fields: [tagId], references: [id])
  User       User      @relation("author", fields: [userId], references: [id])
}



model Article {
  id           Int          @id @default(autoincrement())
  content      String
  title        String
  authorId     String
  author       Doctor       @relation(fields: [authorId], references: [id])
  saved        SaveArticle[] 
  createdAt    String
}


model Flair {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts ForumPost[] @relation("FlairToForumPost")
}

model Group {
  id           Int    @id @default(autoincrement())
  name         String
  doctorId     String
  doctor       Doctor @relation(fields: [doctorId], references: [id])
  participants User[] @relation("GroupToUser")
}

model SaveArticle {
 id       Int    @id @default(autoincrement())
 articleId Int
 userId   String
 article  Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
 user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model MedSchedule {
  id         Int        @id @default(autoincrement())
  medId      Int
  userId     String
  quantity   Int
  schedule   String[]
  medication Meds       @relation(fields: [medId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model Habit {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  tracking TrackHabit[]
}

model TrackHabit {
  id      Int    @id @default(autoincrement())
  habitId Int
  userId  String
  tracker Json[]
  habit   Habit  @relation(fields: [habitId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model window {
  id           Int      @id @default(autoincrement())
  doctorId     String
  startingTime String
  endingTime   String
  duration     Int
  pause        Int
  slots        Slot[]
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
}

model Scheduledwindow {
  id           Int      @id @default(autoincrement())
  doctorId     String
  startingTime String
  endingTime   String
  duration     Int
  pause        Int
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
}