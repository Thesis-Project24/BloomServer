generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  first_name String
  last_name String
  profile_picture String?
  phone_number String?
  age Int?
  mood Int[]
  journalPosts Journal[]
  meds MedSchedule[]
  appointments Appointment[]
  forumPosts ForumPost[]
  comments Comment[] @relation("author")
  tags Comment[] @relation("tag")
  groups Group[]
  savedArticles SaveArticle[]
  trackedHabits TrackHabit[]
  slots Slot[] @relation("waitlist")
}

model Doctor {
  id Int @id @default(autoincrement())
  email String @unique
  first_name String
  last_name String
  specialty String?
  profile_picture String?
  phone_number String?
  address String?
  bio String?
  artices Article[]
  groups Group[]
  window window[]
  appointment Appointment[]
}

model Meds {
  id Int @id @default(autoincrement())
  name String  @unique
  schedules MedSchedule[]
  }

model Journal {
  id Int @id @default(autoincrement())
  private Boolean @default(true)
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId Int
}

model Appointment {
  id Int @id @default(autoincrement())
  patient User @relation(fields: [patientId],references: [id])
  patientId Int
  doctor Doctor @relation(fields: [doctorId],references: [id])
  doctorId Int
  appDetails String?
  appStatus String @default("available")
  appReview Int?
  appFeedback String?
  slot Slot @relation(fields: [slotId],references: [id])
  slotId Int @unique
}
model Slot {
  id Int @id @default(autoincrement())
  window window @relation(fields: [windowId],references: [id])
  windowId Int
  waitlist User[] @relation(name:"waitlist")
  appointment Appointment?
}
model ForumPost {
  id Int @id @default(autoincrement())
  content String
  upvote Int?
  downvote Int?
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  comments Comment[]
  flairs Flair[]
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  upvote Int?
  downvote Int?
  post ForumPost @relation(fields: [postId],references: [id])
  postId Int
  User User @relation(name: "author",fields: [userId],references: [id])
  userId Int
  taggedUser User? @relation(name: "tag",fields: [tagId],references: [id])
  tagId Int?
}

model Article {
  id Int @id @default(autoincrement())
  content String
  author Doctor @relation(fields:[authorId],references: [id])
  authorId Int
  saved SaveArticle[]
}

model Flair {
id Int @id  @default(autoincrement())
name String @unique
posts ForumPost[]
}

model Group {
  id Int @id @default(autoincrement())
  name String 
  doctor Doctor @relation(fields: [doctorId], references: [id])
  doctorId Int
  participants User[]
}

model SaveArticle {
  id Int@id @default(autoincrement())
  article Article @relation(fields: [articleId], references: [id])
  articleId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model MedSchedule {
  id Int @id @default(autoincrement())
  medication Meds @relation(fields: [medId],references: [id])
  medId Int
  user User @relation(fields: [userId],references: [id])
  userId Int
  quantity Int
  schedule DateTime
}

model Habit {
  id Int @id @default(autoincrement())
  name String @unique
  tracking TrackHabit[]
}

model TrackHabit  {
  id Int @id @default(autoincrement())
  habit Habit @relation(fields: [habitId], references: [id])
  habitId Int
  user User @relation(fields:[userId], references: [id])
  userId Int
  tracker Int[]
}
model window {
  id Int @id @default(autoincrement())
  doctor Doctor @relation(fields: [doctorId],references: [id])
  doctorId Int
  startingTime DateTime
  endingTime DateTime
  duration Int
  break Int
  slots Slot[]
}